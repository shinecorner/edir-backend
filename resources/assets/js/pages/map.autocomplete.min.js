var autocomplete, map, marker;

$('form input').on('keypress', function (e) {
    // disable form submit on enter
    return e.which !== 13;
});

$('#street-name').on('focus', function () {
    $('#mapModal').modal('show');
});

$("#mapModal").on('shown.bs.modal', function () {
    initMap();

    var hasAddress = $('form .address-row input[name=address]').val();

    if (hasAddress) {
        $('#autocomplete').val($('form .address-row input[name=address]').val());
    } else {
        $('#autocomplete').focus();
    }
});

$('#mapModal').on('hidden.bs.modal', function (e) {

    if (autocomplete.getPlace()) {

        var place = autocomplete.getPlace();
        var placeArr = {};
        for (var i = 0; i < place.address_components.length; i++) {
            placeArr[place.address_components[i].types[0]] = place.address_components[i];
        }

        // empty all hidden fields.
        $('form .address-row input[type=hidden]').val('null');

        // return address into inputs
        $('form .address-row input[name=address]').val(
            placeArr.route.long_name + ' ' + placeArr.street_number.long_name + ', ' +
            placeArr.postal_code.long_name + ' ' + placeArr.locality.long_name + ', ' +
            placeArr.administrative_area_level_1.long_name
        );

        $("form .address-row input[name='location[street_name]']").val(placeArr.route.long_name);
        $("form .address-row input[name='location[street_number]']").val(placeArr.street_number.long_name);
        $("form .address-row input[name='location[zip_code]']").val(placeArr.postal_code.long_name);
        $("form .address-row input[name='location[city]']").val(placeArr.locality.long_name);

        if (placeArr.administrative_area_level_2) {
            $("form .address-row input[name='location[district]']").val(placeArr.administrative_area_level_2.long_name);
        }
        if (placeArr.administrative_area_level_3) {
            $("form .address-row input[name='location[county]']").val(placeArr.administrative_area_level_3.long_name);
        }
        $("form .address-row input[name='location[state]']").val(placeArr.administrative_area_level_1.long_name);
        $("form .address-row input[name='location[latitude]']").val(place.geometry.location.lat);
        $("form .address-row input[name='location[longitude]']").val(place.geometry.location.lng);
    }

});

function initAutocomplete() {
    autocomplete = new google.maps.places.Autocomplete(
        (document.getElementById('autocomplete')),
        {
            types: ['address'],
            componentRestrictions: {country: 'de'}
        }
    );
    autocomplete.addListener('place_changed', placeChanged);
}

function initMap(place) {

    if ($("form .address-row input[name='location[latitude]']").val()
        && $("form .address-row input[name='location[longitude]']").val()) {

        var location = {
            lat: parseFloat($("form .address-row input[name='location[latitude]']").val()),
            lng: parseFloat($("form .address-row input[name='location[longitude]']").val())
        };

        map = new google.maps.Map(document.getElementById('map'), {
            center: location,
            zoom: 18
        });

        marker = new google.maps.Marker({
            position: location,
            map: map
        });

    } else {

        map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: 51.0851715, lng: 10.4498651},
            zoom: 7
        });
    }
}

function placeChanged() {
    var place = autocomplete.getPlace();
    var infowindow = new google.maps.InfoWindow();

    map.setCenter(place.geometry.location);
    map.setZoom(18);

    if (marker) {
        marker.setMap(null);
    }

    marker = new google.maps.Marker({
        position: place.geometry.location,
        map: map
    });

    infowindow.setContent('<div><strong>Ist diese Adresse korrekt?</strong><br><br>' + place.adr_address + '</div>');
    infowindow.open(map, marker);

    var placeArr = {};

    for (var i = 0; i < place.address_components.length; i++) {
        placeArr[place.address_components[i].types[0]] = place.address_components[i];
    }

    if (placeArr.street_number) {

        $('#autocomplete').parent().removeClass('error');
        $('#autocomplete').parent().find('label').find('.error-list').remove();

    } else {

        $('#autocomplete').parent().removeClass('error');
        $('#autocomplete').parent().find('label').find('.error-list').remove();
        $('#autocomplete').parent().addClass('error');
        $('#autocomplete').parent().find('label').append('<div class="error-list">Bitte geben Sie eine Hausnummer ein</div>');
        $('#autocomplete').val(placeArr.route.long_name + ' ');
        $('#autocomplete').focus();

    }
}
